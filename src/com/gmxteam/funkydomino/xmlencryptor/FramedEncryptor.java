/*
 *   This file is part of Funky Domino.
 *
 *   Funky Domino is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Funky Domino is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Funky Domino.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.gmxteam.funkydomino.xmlencryptor;

import com.gmxteam.funkydomino.utils.xmlparser.encrypt.EncryptedOutputStream;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Guillaume Poirier-Morency
 */
public class FramedEncryptor extends javax.swing.JFrame {

    /**
     * Fichiers sélectionnés qui seront encryptés.
     */
    private File[] filesSelection;

    /**
     * Creates new form FramedEncryptor
     */
    public FramedEncryptor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnEncrypter = new javax.swing.JButton();
        btnQuitter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listeFichierAEncrypter = new javax.swing.JList();
        lblFichierAEncrypter = new javax.swing.JLabel();
        pwdClePrivee = new javax.swing.JPasswordField();
        lblClePrivee = new javax.swing.JLabel();
        btnVider = new javax.swing.JButton();
        btnAjouter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypteur de fichier XML");
        setResizable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnEncrypter.setText("Encrypter");
        btnEncrypter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncrypterActionPerformed(evt);
            }
        });

        btnQuitter.setText("Quitter");
        btnQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitterActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listeFichierAEncrypter);

        lblFichierAEncrypter.setText("Liste des fichiers à encrypter");

        lblClePrivee.setText("Clé privée");

        btnVider.setText("Vider");
        btnVider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViderActionPerformed(evt);
            }
        });

        btnAjouter.setText("Ajouter");
        btnAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjouterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFichierAEncrypter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAjouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVider, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(btnQuitter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnEncrypter))
                                    .addComponent(pwdClePrivee))
                                .addComponent(lblClePrivee)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFichierAEncrypter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAjouter)
                                    .addComponent(btnVider))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblClePrivee)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pwdClePrivee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnQuitter)
                                    .addComponent(btnEncrypter)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitterActionPerformed

    private void btnEncrypterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncrypterActionPerformed
        if (this.filesSelection == null) {
            return;
        }
        this.progressBar.setValue(0);
        double unitContribution = this.progressBar.getMaximum() / filesSelection.length;
        double byUnitContribution = unitContribution / 10;


        this.btnEncrypter.setEnabled(false);
        for (File f : filesSelection) {
            long startedTime = System.currentTimeMillis();
            System.out.println("Encryption de " + f + " en cours...");
            try {
                // Lire et encrypter les fichiers ici...
                FileInputStream fileIn = new FileInputStream(f);
                this.progressBar.setValue((int) (this.progressBar.getValue() + byUnitContribution));

                File fileoutput = new File(f.getAbsolutePath() + ".enc");
                fileoutput.createNewFile();
                this.progressBar.setValue((int) (this.progressBar.getValue() + byUnitContribution));

                FileOutputStream fileOut = new FileOutputStream(fileoutput);
                this.progressBar.setValue((int) (this.progressBar.getValue() + byUnitContribution));

                EncryptedOutputStream encryptedOut = new EncryptedOutputStream(fileOut, this.pwdClePrivee.getPassword());
                this.progressBar.setValue((int) (this.progressBar.getValue() + byUnitContribution));

                BufferedOutputStream bufferedOut = new BufferedOutputStream(encryptedOut);
                this.progressBar.setValue((int) (this.progressBar.getValue() + byUnitContribution));


                // On écrit dans un buffer pour la vitesse.
                int byteData;
                while ((byteData = fileIn.read()) != -1) {

                    bufferedOut.write(byteData);
                }
                this.progressBar.setValue((int) (this.progressBar.getValue() + 5 * byUnitContribution));

                fileIn.close();
                bufferedOut.flush();
                bufferedOut.close();
                encryptedOut.close();
                fileOut.close();
                System.out.println("Encryption du fichier " + f + " terminée en " + (System.currentTimeMillis() - startedTime) + " ms.");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramedEncryptor.class.getName()).log(Level.SEVERE, null, ex);
                jLabel3.setText("Échec lors de l'encryption !");

            } catch (IOException ex) {
                Logger.getLogger(FramedEncryptor.class.getName()).log(Level.SEVERE, null, ex);
                jLabel3.setText("Échec lors de l'encryption !");

            }


        }
        jLabel3.setText("Encryption réussie !");
        this.btnEncrypter.setEnabled(true);


    }//GEN-LAST:event_btnEncrypterActionPerformed

    private void btnViderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViderActionPerformed
        jLabel3.setText("");
    }//GEN-LAST:event_btnViderActionPerformed

    private void btnAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjouterActionPerformed
        // TODO code application logic here
        JFileChooser jfc = new JFileChooser();
        jfc.setMultiSelectionEnabled(true);

        jfc.showOpenDialog(this);
        filesSelection = jfc.getSelectedFiles();
        this.listeFichierAEncrypter.setListData(jfc.getSelectedFiles());
    }//GEN-LAST:event_btnAjouterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramedEncryptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramedEncryptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramedEncryptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramedEncryptor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramedEncryptor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAjouter;
    private javax.swing.JButton btnEncrypter;
    private javax.swing.JButton btnQuitter;
    private javax.swing.JButton btnVider;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClePrivee;
    private javax.swing.JLabel lblFichierAEncrypter;
    private javax.swing.JList listeFichierAEncrypter;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPasswordField pwdClePrivee;
    // End of variables declaration//GEN-END:variables
}
